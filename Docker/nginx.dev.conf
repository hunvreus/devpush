worker_processes 1;
error_log /dev/stderr debug;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict route_mapping 10m;
    resolver 127.0.0.11 valid=30s;
    
    # Proxy settings
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Ignore invalid/duplicate headers from upstream
    ignore_invalid_headers off;
    merge_slashes off;
    
    # Add basic MIME types
    include mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name _;

        # Update endpoint open to all in dev
        location /set-alias {
            allow all;
            content_by_lua_block {
                local cjson = require "cjson"
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                if not body then
                    ngx.status = 400
                    ngx.say("No data received")
                    return
                end
                local ok, data = pcall(cjson.decode, body)
                if not ok then
                    ngx.status = 400
                    ngx.say("Invalid JSON")
                    return
                end
                local dict = ngx.shared.route_mapping
                for alias, target in pairs(data) do
                    dict:set(alias, target)
                end
                ngx.say("Mapping updated")
            }
        }

        location / {
            set $backend "";
            access_by_lua_block {
                local host = ngx.var.host
                -- Explicit rule: if host starts with "app.", route to "app"
                if ngx.re.find(host, "^app\\.") then
                    ngx.var.backend = "app"
                    return
                end

                local dict = ngx.shared.route_mapping
                local target = dict:get(host)
                if target then
                    ngx.var.backend = target
                else
                    local base_domain = os.getenv("BASE_DOMAIN") or "localhost"
                    local m, err = ngx.re.match(host, "^(.+)-id-([A-Za-z0-9]{7})\\." .. base_domain .. "$")
                    if m then
                        ngx.var.backend = "runner-" .. m[2]
                    else
                        ngx.exit(404)
                    end
                end
            }
            proxy_pass http://$backend:8000;
        }
    }
}
