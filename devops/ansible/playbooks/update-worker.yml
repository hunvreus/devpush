---
- hosts: all
  vars:
    deploy_user: deploy
    app_dir: /home/deploy/devpush

  tasks:
    - name: Clone/update repository
      git:
        repo: "{{ github_repo }}"
        dest: "{{ app_dir }}"
        update: yes
        force: yes

    - name: Copy .env file
      ansible.builtin.copy:
        src: ../../../.env.prod
        dest: "{{ app_dir }}/.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0600"

    - name: Build worker image
      command: docker compose -p devpush build worker
      args:
        chdir: "{{ app_dir }}"

    - name: Get current worker container name
      command: docker ps --filter "name=devpush-worker" --format "{{'{{.Names}}'}}"
      register: old_worker
      args:
        chdir: "{{ app_dir }}"

    - name: Start new worker container
      command: docker compose -p devpush -f docker-compose.yml -f docker-compose.override.prod.yml up -d --no-deps worker
      args:
        chdir: "{{ app_dir }}"

    - name: Wait for new worker to be healthy
      shell: |
        for i in $(seq 1 60); do
          healthy=$(docker ps --filter "name=devpush-worker" --filter "health=healthy" -q | wc -l)
          [ "$healthy" -ge 1 ] && exit 0
          sleep 10
        done
        exit 1

    - name: Gracefully stop old worker (SIGTERM)
      command: docker stop {{ old_worker.stdout_lines[0] }}
      when: old_worker.stdout_lines | length > 0
      args:
        chdir: "{{ app_dir }}"

    - name: Wait for old worker to exit
      shell: |
        for i in $(seq 1 64); do
          if ! docker ps --filter "name={{ old_worker.stdout_lines[0] }}" \
                         --filter "status=running" | grep -q {{ old_worker.stdout_lines[0] }}; then
            exit 0
          fi
          sleep 10
        done
        exit 1
      when: old_worker.stdout_lines | length > 0
      args:
        chdir: "{{ app_dir }}"

    - name: Remove stopped old worker container
      command: docker rm {{ old_worker.stdout_lines[0] }}
      when: old_worker.stdout_lines | length > 0
      ignore_errors: yes
      args:
        chdir: "{{ app_dir }}"

    - name: Verify single worker is running
      shell: |
        expected=1
        running=$(docker ps --filter "name=devpush-worker" -q | wc -l)
        if [ "$running" = "$expected" ]; then
          echo "Worker swap complete"
          exit 0
        else
          echo "Expected $expected worker, but $running are running"
          exit 1
        fi
      args:
        chdir: "{{ app_dir }}" 