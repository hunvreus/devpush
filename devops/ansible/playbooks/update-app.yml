---
- hosts: all
  vars:
    deploy_user: deploy
    app_dir: /home/deploy/devpush

  tasks:
    - name: Clone/update repository
      git:
        repo: "{{ github_repo }}"
        dest: "{{ app_dir }}"
        update: yes
        force: yes

    - name: Copy .env file
      ansible.builtin.copy:
        src: ../../../.env.prod
        dest: "{{ app_dir }}/.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0600"
    
    - name: Copy access list if present
      copy:
        src: ../../../access.json
        dest: /srv/devpush/access.json
        owner: 1000
        group: 1000
        mode: "0644"
      ignore_errors: yes

    - name: Build app image
      command: docker compose -p devpush build app
      args:
        chdir: "{{ app_dir }}"

    - name: Get current app container IDs
      command: docker ps --filter "name=devpush-app" --format "{{'{{.ID}}'}}"
      register: old_app_reg
      args:
        chdir: "{{ app_dir }}"

    - name: Set desired replica count variables
      set_fact:
        old_count: "{{ old_app_reg.stdout_lines | length }}"
        target_count: "{{ (old_app_reg.stdout_lines | length) + 1 }}"

    - name: Scale apps to target count (add new instance)
      command: docker compose -p devpush -f docker-compose.yml -f docker-compose.override.prod.yml up -d --scale app={{ target_count }} --no-recreate
      args:
        chdir: "{{ app_dir }}"

    - name: Get all app container IDs (wait for new one to appear)
      command: docker ps --filter "name=devpush-app" --format '{{'{{.ID}}'}}'
      register: all_app_ids
      retries: 10
      delay: 3
      until: "(all_app_ids.stdout_lines | difference(old_app_reg.stdout_lines)) | length > 0"
      args:
        chdir: "{{ app_dir }}"

    - name: Identify new app ID
      set_fact:
        old_app_id: "{{ old_app_reg.stdout_lines[0] | default('') }}"
        new_app_id: "{{ (all_app_ids.stdout_lines | difference(old_app_reg.stdout_lines)) | first }}"

    - name: Wait until new app is healthy
      shell: |
        for i in $(seq 1 60); do
          status=$(docker inspect {{ new_app_id }} --format {% raw %}'{{.State.Health.Status}}'{% endraw %} 2>/dev/null || echo "starting")
          if [ "$status" = "healthy" ]; then
            echo "New app is healthy."
            exit 0
          fi
          echo "Waiting for app health... ($status)"
          sleep 5
        done
        echo "Timeout waiting for app health."
        exit 1
      args:
        chdir: "{{ app_dir }}"

    - name: Gracefully stop old app
      command: docker stop {{ old_app_id }}
      when: old_app_id != ""
      args:
        chdir: "{{ app_dir }}"

    - name: Remove stopped old app container
      command: docker rm {{ old_app_id }}
      when: old_app_id != ""
      ignore_errors: yes
      args:
        chdir: "{{ app_dir }}"

    - name: Scale apps back to single replica
      command: docker compose -p devpush -f docker-compose.yml -f docker-compose.override.prod.yml up -d --scale app=1 --no-recreate
      args:
        chdir: "{{ app_dir }}"

    - name: Verify app container is healthy
      shell: |
        expected=1
        healthy=$(docker ps --filter "name=devpush-app" --filter "health=healthy" -q | wc -l)
        if [ "$healthy" = "$expected" ]; then
          echo "App container is healthy"
          exit 0
        else
          echo "Expected $expected healthy app container, but $healthy are healthy"
          exit 1
        fi
      args:
        chdir: "{{ app_dir }}"

    - name: Verify app is responding
      shell: |
        docker compose -p devpush exec -T app curl -f http://localhost:8000/health
      args:
        chdir: "{{ app_dir }}"
      retries: 5
      delay: 10 