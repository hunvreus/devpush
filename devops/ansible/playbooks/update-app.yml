---
- hosts: all
  vars:
    deploy_user: deploy
    app_dir: /home/deploy/devpush

  tasks:
    - name: Clone/update repository
      git:
        repo: "{{ github_repo }}"
        dest: "{{ app_dir }}"
        update: yes
        force: yes

    - name: Copy .env file
      ansible.builtin.copy:
        src: ../../../.env.prod
        dest: "{{ app_dir }}/.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: "0600"

    - name: Build app image
      command: docker compose -p devpush build app
      args:
        chdir: "{{ app_dir }}"

    - name: Get running app container
      command: docker ps --filter "name=devpush-app" --format "{{'{{.Names}}'}}"
      register: running_app
      args:
        chdir: "{{ app_dir }}"

    - name: Stop app container
      command: docker stop {{ running_app.stdout_lines[0] }}
      args:
        chdir: "{{ app_dir }}"

    - name: Wait for app container to exit
      shell: |
        while docker ps --filter "name={{ running_app.stdout_lines[0] }}" --filter "status=running" | grep -q {{ running_app.stdout_lines[0] }}; do
          echo "Waiting for {{ running_app.stdout_lines[0] }} to exit..."
          sleep 5
        done
      args:
        chdir: "{{ app_dir }}"

    - name: Remove stopped app container
      command: docker rm {{ running_app.stdout_lines[0] }}
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes

    - name: Start new app container
      command: docker compose -p devpush -f docker-compose.yml -f docker-compose.override.prod.yml up -d --no-deps app
      args:
        chdir: "{{ app_dir }}"

    - name: Wait for new app container to be healthy
      shell: |
        for i in $(seq 1 80); do        # 80 Ã— 10 s = 13 min max
          healthy=$(docker ps --filter "name=devpush-app" --filter "health=healthy" -q | wc -l)
          if [ "$healthy" -ge 1 ]; then
            echo "App container updated and healthy"
            exit 0
          fi
          echo "Waiting for app container to be healthy ($healthy/1)..."
          sleep 10
        done
        echo "Timeout waiting for app container to be healthy"
        exit 1
      args:
        chdir: "{{ app_dir }}"

    - name: Verify app container is healthy
      shell: |
        expected=1
        healthy=$(docker ps --filter "name=devpush-app" --filter "health=healthy" -q | wc -l)
        if [ "$healthy" = "$expected" ]; then
          echo "App container is healthy"
          exit 0
        else
          echo "Expected $expected healthy app container, but $healthy are healthy"
          exit 1
        fi
      args:
        chdir: "{{ app_dir }}"

    - name: Verify app is responding
      shell: |
        docker compose -p devpush exec -T app curl -f http://localhost:8000/health
      args:
        chdir: "{{ app_dir }}"
      retries: 5
      delay: 10 